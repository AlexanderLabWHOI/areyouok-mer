configfile: "config.yaml"

import os
import pandas as pd

FASTQFILES = config["fastqdir"]
TRIMMEDINTERMED = config["trimmedfastqdirintermed"]
TRIMMEDFASTQFILES = config["trimmedfastqdir"]
OUTPUTDIR = config["outputsourmash"]
COMPAREDIR = config["outputcomparison"]
TRINITYFASTADIR = config["trinityfastadir"]
TRANSDECODERDIR = config["transdecoder"]
BACKTRANSLATEDDIR = config["backtrans"]
BACKTRANSLATEDSIG = config["backtranssig"]
MMETSPDIR = config["mmetspdir"]
OUTPUTNAME = config["outputname"]
REFERENCEDIR = config["referencedir"]

indexfile = pd.read_csv(config["indexfile"], sep = "\t", index_col = 2)
referencefiles = list((indexfile.loc["refgen"])["FileName"])
rawfiles = (indexfile.loc[["refgen","onesid"]])
mmetspfiles = (indexfile.loc[["reftrans"]])

availablesigs = []
directorydict = dict({"refgen":REFERENCEDIR,\
                      "reftrans":MMETSPDIR,\
                      "onesid":TRIMMEDINTERMED,\
                      "trinity":TRINITYFASTADIR})
for r in range(0, len(rawfiles.index)):
    currdata = rawfiles.iloc[r]
    availablesigs.append(os.path.join(directorydir[currdata.index], str(currdata["FileName"]) + str(currdata["FileExtension"]) + ".sig"))
    # also looking for a signature in the Trinity directory.
    if str(directorydir[currdata.index]) in ["onesid", "twosid"]:
        availablesigs.append(os.path.join(TRINITYFASTADIR, str(currdata["FileName"]) + str(currdata["FileExtension"]) + ".sig"))
    


import os

rule sourmashcompute:
    input:
        fastafile = os.path.join(TRIMMEDINTERMED, "{sample}{ext}")
    output:
        os.path.join(OUTPUTDIR, "{sample}{ext}.sig")
    params:
        kmerval = "21,31,33,51",
        outdir = OUTPUTDIR,
        inputname = "{sample}"
    shell:
        """
        echo "sample here!"
        sourmash compute -k {params.kmerval} --track-abundance {input}
        mv {params.inputname}.fastq.sig {params.outdir}
        """
        
rule sourmashcomputetrinity:
    input:
        fastafile = os.path.join(TRINITYFASTADIR, "{sample}.fasta")
    output:
        os.path.join(OUTPUTDIR, "{sample}.fasta.sig")
    params:
        kmerval = "21,31,33,51",
        outdir = OUTPUTDIR,
        inputname = "{sample}"
    shell:
        """
        echo "sample here!"
        sourmash compute -k {params.kmerval} --track-abundance {input}
        mv {params.inputname}.fasta.sig {params.outdir}
        """
        
rule sourmashcomputemmetsp:
    input:
        fastafile = os.path.join(MMETSPDIR, "{sample}.fasta")
    output:
        os.path.join(MMETSPDIR, "{sample}.fasta.sig")
    params:
        kmerval = "21,31,33,51",
        outdir = MMETSPDIR,
        inputname = "{sample}"
    shell:
        """
        echo "sample here!"
        sourmash compute -k {params.kmerval} --track-abundance {input}
        mv {params.inputname}.fasta.sig {params.outdir}
        """
        
rule sourmashcomputetransseq:
    input:
        fastafile = os.path.join(BACKTRANSLATEDDIR, "{sample}.fasta")
    output:
        os.path.join(BACKTRANSLATEDSIG, "{sample}.fasta.sig")
    params:
        kmerval = "21,33,51",
        outdir = BACKTRANSLATEDSIG,
        inputname = "{sample}"
    shell:
        """
        echo "sample here!"
        sourmash compute -k {params.kmerval} --track-abundance {input}
        mv {params.inputname}.fasta.sig {params.outdir}
        """
        
rule sourmashcomputeprotein:
    input:
        fastafile = os.path.join(TRANSDECODERDIR, "{sample}.fasta.transdecoder.pep")
    output:
        os.path.join(TRANSDECODERDIR, "{sample}.fasta.transdecoder.pep.sig")
    params:
        kmerval = "12,15,18,21,33,51",
        outdir = TRANSDECODERDIR,
        inputname = "{sample}"
    shell:
        """
        echo "sample here!"
        sourmash compute -k {params.kmerval} --track-abundance {input} --protein 
        mv {params.inputname}.fasta.transdecoder.pep.sig {params.outdir}
        """
        
rule sourmashcompare:
    input:
        availablesigs
    params:
        signame = availablesigs 
    output:
        out21 = os.path.join(COMPAREDIR, OUTPUTNAME + "_k21.cmp.csv"),
        out33 = os.path.join(COMPAREDIR, OUTPUTNAME + "_k33.cmp.csv"),
        out51 = os.path.join(COMPAREDIR, OUTPUTNAME + "_k51.cmp.csv")
    shell:
        """
        sourmash compare -k 21 {params.signame} --csv {output.out21}
        sourmash compare -k 33 {params.signame} --csv {output.out33}
        sourmash compare -k 51 {params.signame} --csv {output.out51}
        """
        

rule sourmashcompareprotein:
    input:
        availablesigs
    params:
        signame = availablesigsprot #" ".join([os.path.join(OUTPUTDIR, signame + ".sig") for signame in availablesigs]) #os.path.join(OUTPUTDIR, "*.sig")
    output:
        out12 = os.path.join(COMPAREDIR, OUTPUTNAME + "_k12_protein.cmp.csv"),
        out15 = os.path.join(COMPAREDIR, OUTPUTNAME + "_k15_protein.cmp.csv"),
        out18 = os.path.join(COMPAREDIR, OUTPUTNAME + "_k18_protein.cmp.csv"),
        out21 = os.path.join(COMPAREDIR, OUTPUTNAME + "_k21_protein.cmp.csv"),
        out33 = os.path.join(COMPAREDIR, OUTPUTNAME + "_k33_protein.cmp.csv"),
        out51 = os.path.join(COMPAREDIR, OUTPUTNAME + "_k51_protein.cmp.csv")
    shell:
        """
        sourmash compare -k 12 {params.signame} --csv {output.out12} --protein
        sourmash compare -k 15 {params.signame} --csv {output.out15} --protein
        sourmash compare -k 18 {params.signame} --csv {output.out18} --protein
        sourmash compare -k 21 {params.signame} --csv {output.out21} --protein
        sourmash compare -k 33 {params.signame} --csv {output.out33} --protein
        sourmash compare -k 51 {params.signame} --csv {output.out51} --protein
        """
